#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ RAG Q&A —Å–∏—Å—Ç–µ–º—ã –∫ —Ä–∞–±–æ—Ç–µ
"""
import sys
import os
from pathlib import Path
import sqlite3


def print_status(message, status="info"):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç—É—Å–∞ —Å —Ü–≤–µ—Ç–∞–º–∏"""
    colors = {
        "ok": "\033[92m",      # –ó–µ–ª—ë–Ω—ã–π
        "error": "\033[91m",   # –ö—Ä–∞—Å–Ω—ã–π
        "warning": "\033[93m", # –ñ—ë–ª—Ç—ã–π
        "info": "\033[94m"     # –°–∏–Ω–∏–π
    }
    end = "\033[0m"
    
    icons = {
        "ok": "‚úÖ",
        "error": "‚ùå",
        "warning": "‚ö†Ô∏è",
        "info": "‚ÑπÔ∏è"
    }
    
    color = colors.get(status, "")
    icon = icons.get(status, "‚Ä¢")
    print(f"{color}{icon} {message}{end}")


def check_python_version():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ—Ä—Å–∏–∏ Python"""
    print("\n" + "="*60)
    print("üêç –ü–†–û–í–ï–†–ö–ê PYTHON")
    print("="*60)
    
    version = sys.version_info
    version_str = f"{version.major}.{version.minor}.{version.micro}"
    
    print_status(f"Python –≤–µ—Ä—Å–∏—è: {version_str}", "info")
    
    if version.major >= 3 and version.minor >= 8:
        print_status("–í–µ—Ä—Å–∏—è Python –ø–æ–¥—Ö–æ–¥–∏—Ç (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.8+)", "ok")
        return True
    else:
        print_status(f"–í–µ—Ä—Å–∏—è Python —Å–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–∞—è (—Ç—Ä–µ–±—É–µ—Ç—Å—è 3.8+)", "error")
        return False


def check_env_file():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞"""
    print("\n" + "="*60)
    print("üîê –ü–†–û–í–ï–†–ö–ê .ENV –§–ê–ô–õ–ê")
    print("="*60)
    
    env_path = Path(".env")
    
    if not env_path.exists():
        print_status(".env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω", "error")
        print_status("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º:", "info")
        print("   OPENAI_API_KEY=sk-your-api-key-here")
        return False
    
    print_status(".env —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω", "ok")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–∞
    from dotenv import load_dotenv
    load_dotenv()
    
    api_key = os.getenv("OPENAI_API_KEY")
    
    if not api_key or api_key == "your-api-key-here":
        print_status("OPENAI_API_KEY –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "error")
        return False
    
    print_status(f"OPENAI_API_KEY —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–ª–∏–Ω–∞: {len(api_key)} —Å–∏–º–≤–æ–ª–æ–≤)", "ok")
    return True


def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π"""
    print("\n" + "="*60)
    print("üì¶ –ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô")
    print("="*60)
    
    required_packages = {
        "openai": "OpenAI API",
        "langchain": "LangChain",
        "langchain_community": "LangChain Community",
        "qdrant_client": "Qdrant Client",
        "sentence_transformers": "Sentence Transformers",
        "torch": "PyTorch",
        "flask": "Flask",
        "tqdm": "Progress Bar"
    }
    
    all_ok = True
    
    for package, name in required_packages.items():
        try:
            __import__(package)
            print_status(f"{name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "ok")
        except ImportError:
            print_status(f"{name} –ù–ï —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω", "error")
            all_ok = False
    
    if not all_ok:
        print_status("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:", "warning")
        print("   pip install -r rag_requirements.txt")
    
    return all_ok


def check_database():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    print("\n" + "="*60)
    print("üíæ –ü–†–û–í–ï–†–ö–ê –ë–ê–ó–´ –î–ê–ù–ù–´–•")
    print("="*60)
    
    db_path = Path("qa_database.db")
    
    if not db_path.exists():
        print_status("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö qa_database.db –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", "error")
        print_status("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py", "info")
        return False
    
    print_status("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–π–¥–µ–Ω–∞", "ok")
    
    try:
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
        cursor.execute("SELECT COUNT(*) FROM qa_pairs")
        pairs_count = cursor.fetchone()[0]
        
        cursor.execute("SELECT COUNT(*) FROM qa_pairs WHERE is_irrelevant = 0 OR is_irrelevant IS NULL")
        relevant_count = cursor.fetchone()[0]
        
        conn.close()
        
        print_status(f"–í—Å–µ–≥–æ –ø–∞—Ä Q&A: {pairs_count}", "info")
        print_status(f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö –ø–∞—Ä: {relevant_count}", "info")
        
        if pairs_count == 0:
            print_status("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞—è", "warning")
            return False
        
        print_status("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ", "ok")
        return True
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}", "error")
        return False


def check_qdrant_storage():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ Qdrant —Ö—Ä–∞–Ω–∏–ª–∏—â–∞"""
    print("\n" + "="*60)
    print("üîç –ü–†–û–í–ï–†–ö–ê QDRANT –•–†–ê–ù–ò–õ–ò–©–ê")
    print("="*60)
    
    qdrant_path = Path("qdrant_storage")
    
    if not qdrant_path.exists():
        print_status("Qdrant —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "error")
        print_status("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python rag_indexer.py", "info")
        return False
    
    print_status("Qdrant —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞–π–¥–µ–Ω–æ", "ok")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    try:
        from qdrant_client import QdrantClient
        
        client = QdrantClient(path=str(qdrant_path))
        collections = client.get_collections()
        
        if len(collections.collections) == 0:
            print_status("–ö–æ–ª–ª–µ–∫—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ", "warning")
            return False
        
        for collection in collections.collections:
            info = client.get_collection(collection.name)
            print_status(
                f"–ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection.name}': {info.points_count} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", 
                "ok"
            )
        
        return True
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Qdrant: {e}", "error")
        return False


def check_rag_components():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤"""
    print("\n" + "="*60)
    print("ü§ñ –ü–†–û–í–ï–†–ö–ê RAG –ö–û–ú–ü–û–ù–ï–ù–¢–û–í")
    print("="*60)
    
    files_to_check = {
        "rag_config.py": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è",
        "rag_indexer.py": "–ò–Ω–¥–µ–∫—Å–µ—Ä",
        "rag_retriever.py": "Retriever",
        "rag_app.py": "–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        "templates/rag_index.html": "HTML —à–∞–±–ª–æ–Ω"
    }
    
    all_ok = True
    
    for file_path, description in files_to_check.items():
        path = Path(file_path)
        if path.exists():
            print_status(f"{description} ({file_path})", "ok")
        else:
            print_status(f"{description} ({file_path}) –ù–ï –ù–ê–ô–î–ï–ù", "error")
            all_ok = False
    
    return all_ok


def test_rag_initialization():
    """–¢–µ—Å—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã"""
    print("\n" + "="*60)
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï RAG –°–ò–°–¢–ï–ú–´")
    print("="*60)
    
    try:
        print_status("–ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π...", "info")
        from rag_retriever import RAGRetriever
        
        print_status("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG Retriever...", "info")
        retriever = RAGRetriever()
        
        print_status("RAG —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", "ok")
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫
        print_status("–¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...", "info")
        results = retriever.search_similar_pairs("—Ç–µ—Å—Ç", k=3)
        
        print_status(f"–ù–∞–π–¥–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(results)}", "info")
        
        if len(results) > 0:
            print_status("–í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ", "ok")
        else:
            print_status("–ü–æ–∏—Å–∫ –Ω–µ –≤–µ—Ä–Ω—É–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–∏–∑–∫–∞—è —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å)", "warning")
        
        return True
        
    except Exception as e:
        print_status(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}", "error")
        import traceback
        traceback.print_exc()
        return False


def check_disk_space():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞"""
    print("\n" + "="*60)
    print("üíø –ü–†–û–í–ï–†–ö–ê –î–ò–°–ö–û–í–û–ì–û –ü–†–û–°–¢–†–ê–ù–°–¢–í–ê")
    print("="*60)
    
    try:
        import shutil
        total, used, free = shutil.disk_usage(".")
        
        free_gb = free // (2**30)
        total_gb = total // (2**30)
        
        print_status(f"–°–≤–æ–±–æ–¥–Ω–æ: {free_gb} GB –∏–∑ {total_gb} GB", "info")
        
        if free_gb < 5:
            print_status("–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–Ω–∏–º—É–º 5 GB)", "warning")
            return False
        
        print_status("–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞", "ok")
        return True
        
    except Exception as e:
        print_status(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ: {e}", "warning")
        return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("\n" + "="*70)
    print("üöÄ –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò RAG Q&A –°–ò–°–¢–ï–ú–´")
    print("="*70)
    
    checks = [
        ("Python –≤–µ—Ä—Å–∏—è", check_python_version),
        (".env —Ñ–∞–π–ª", check_env_file),
        ("–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏", check_dependencies),
        ("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", check_database),
        ("Qdrant —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", check_qdrant_storage),
        ("RAG –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã", check_rag_components),
        ("–î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ", check_disk_space),
        ("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG", test_rag_initialization)
    ]
    
    results = {}
    
    for name, check_func in checks:
        try:
            results[name] = check_func()
        except Exception as e:
            print_status(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ '{name}': {e}", "error")
            results[name] = False
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á—ë—Ç
    print("\n" + "="*70)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–Å–¢")
    print("="*70)
    
    passed = sum(1 for v in results.values() if v)
    total = len(results)
    
    for name, result in results.items():
        status = "ok" if result else "error"
        print_status(f"{name}: {'–ü–†–û–ô–î–ï–ù–û' if result else '–ü–†–û–í–ê–õ–ï–ù–û'}", status)
    
    print("\n" + "="*70)
    
    if passed == total:
        print_status(f"–í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´ ({passed}/{total})!", "ok")
        print_status("–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!", "ok")
        print_status("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python rag_app.py", "info")
        return 0
    else:
        print_status(f"–ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–í–ê–õ–ï–ù–´ ({passed}/{total})", "error")
        print_status("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Å–∏—Å—Ç–µ–º—ã", "warning")
        return 1


if __name__ == "__main__":
    sys.exit(main())