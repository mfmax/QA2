#!/usr/bin/env python3
"""
–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö QA –≤ Excel
"""
import sys
import json
import argparse
from pathlib import Path
from datetime import datetime
import openpyxl
from openpyxl.styles import Font, PatternFill, Alignment, Border, Side
from openpyxl.utils import get_column_letter

import config
from db import Database


def setup_worksheet_styles(ws):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π –¥–ª—è worksheet"""
    # –°—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    header_fill = PatternFill(start_color="366092", end_color="366092", fill_type="solid")
    header_font = Font(bold=True, color="FFFFFF", size=11)
    
    # –°—Ç–∏–ª—å –≥—Ä–∞–Ω–∏—Ü
    thin_border = Border(
        left=Side(style='thin'),
        right=Side(style='thin'),
        top=Side(style='thin'),
        bottom=Side(style='thin')
    )
    
    return header_fill, header_font, thin_border


def export_qa_pairs(db: Database, output_path: Path, include_stats: bool = True):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä Q&A –≤ Excel"""
    
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö - —Ç–µ–ø–µ—Ä—å –≤—Å–µ –≤ –æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ
    cursor = db.conn.cursor()
    cursor.execute("""
        SELECT 
            id,
            dialog_id,
            filename,
            call_direction,
            operator_phone,
            client_phone,
            call_date,
            call_time,
            question,
            answer,
            direction,
            question_type,
            keywords,
            quality_score,
            created_at
        FROM qa_pairs
        ORDER BY created_at DESC
    """)
    
    rows = cursor.fetchall()
    
    if not rows:
        print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
        return False
    
    # –°–æ–∑–¥–∞–Ω–∏–µ workbook
    wb = openpyxl.Workbook()
    
    # –õ–∏—Å—Ç 1: –ü–∞—Ä—ã Q&A
    ws_pairs = wb.active
    ws_pairs.title = "QA –ü–∞—Ä—ã"
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    headers = [
        "ID", "ID –î–∏–∞–ª–æ–≥–∞", "–§–∞–π–ª", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞", "–¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", 
        "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞", "–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞", "–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞",
        "–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Q&A", "–¢–∏–ø –≤–æ–ø—Ä–æ—Å–∞", 
        "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", "–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è"
    ]
    
    header_fill, header_font, thin_border = setup_worksheet_styles(ws_pairs)
    
    # –ó–∞–ø–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    for col_num, header in enumerate(headers, 1):
        cell = ws_pairs.cell(row=1, column=col_num)
        cell.value = header
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = Alignment(horizontal='center', vertical='center', wrap_text=True)
        cell.border = thin_border
    
    # –ó–∞–ø–∏—Å—å –¥–∞–Ω–Ω—ã—Ö
    for row_num, row_data in enumerate(rows, 2):
        # –ü–∞—Ä—Å–∏–Ω–≥ keywords –∏–∑ JSON
        try:
            keywords = json.loads(row_data[12]) if row_data[12] else []
            keywords_str = ", ".join(keywords) if keywords else ""
        except:
            keywords_str = row_data[12] or ""
        
        values = [
            row_data[0],  # ID
            row_data[1][:16] + "..." if row_data[1] and len(row_data[1]) > 16 else row_data[1],  # Dialog ID
            row_data[2],  # Filename
            row_data[3] or "",  # Call direction
            row_data[4] or "",  # Operator phone
            row_data[5] or "",  # Client phone
            row_data[6] or "",  # Call date
            row_data[7] or "",  # Call time
            row_data[8],  # Question
            row_data[9],  # Answer
            row_data[10],  # Direction (Q&A)
            row_data[11] or "",  # Question type
            keywords_str,  # Keywords
            row_data[13] or "",  # Quality score
            row_data[14]  # Created at
        ]
        
        for col_num, value in enumerate(values, 1):
            cell = ws_pairs.cell(row=row_num, column=col_num)
            cell.value = value
            cell.border = thin_border
            
            # –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ –∏ –ø–µ—Ä–µ–Ω–æ—Å –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
            if col_num in [9, 10]:  # –í–æ–ø—Ä–æ—Å –∏ –û—Ç–≤–µ—Ç
                cell.alignment = Alignment(vertical='top', wrap_text=True)
            else:
                cell.alignment = Alignment(vertical='top')
    
    # –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
    column_widths = {
        1: 8,   # ID
        2: 20,  # Dialog ID
        3: 40,  # Filename
        4: 12,  # Call direction
        5: 15,  # Operator phone
        6: 15,  # Client phone
        7: 12,  # Call date
        8: 10,  # Call time
        9: 60,  # Question
        10: 80, # Answer
        11: 20, # Direction Q&A
        12: 25, # Type
        13: 30, # Keywords
        14: 12, # Score
        15: 20  # Date
    }
    
    for col_num, width in column_widths.items():
        ws_pairs.column_dimensions[get_column_letter(col_num)].width = width
    
    # –í—ã—Å–æ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
    ws_pairs.row_dimensions[1].height = 30
    
    # –õ–∏—Å—Ç 2: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    if include_stats:
        ws_stats = wb.create_sheet("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        stats = db.get_statistics()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ - —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –æ–±—ä–µ–¥–∏–Ω—è–µ–º
        ws_stats['A1'].value = "–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó–í–õ–ï–ß–ï–ù–ò–Ø Q&A"
        ws_stats['A1'].font = Font(bold=True, size=14)
        ws_stats.merge_cells('A1:B1')
        
        # –î–∞–Ω–Ω—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        stats_data = [
            ("", ""),
            ("–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏", ""),
            ("–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤", stats['total_files']),
            ("–§–∞–π–ª–æ–≤ —Å –±–∏–∑–Ω–µ—Å-–ø–∞—Ä–∞–º–∏", stats['files_with_pairs']),
            ("–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä", stats['total_pairs']),
            ("–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞", f"{stats['avg_quality_score']}/10"),
            ("", ""),
            ("–ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"),
        ]
        
        for direction, count in stats.get('by_direction', {}).items():
            stats_data.append((f"  ‚Ä¢ {direction}", count))
        
        stats_data.append(("", ""))
        stats_data.append(("–ü–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"))
        
        for q_type, count in stats.get('by_type', {}).items():
            if q_type:
                stats_data.append((f"  ‚Ä¢ {q_type}", count))
        
        # –ó–∞–ø–∏—Å—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        for row_num, (label, value) in enumerate(stats_data, 1):
            ws_stats.cell(row=row_num, column=1).value = label
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–ø–∏—Å—å –≤–æ –≤—Ç–æ—Ä—É—é –∫–æ–ª–æ–Ω–∫—É –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–æ–∫–∏ (–æ–Ω–∞ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∞)
            if row_num > 1:
                ws_stats.cell(row=row_num, column=2).value = value
            
            # –°—Ç–∏–ª–∏ –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ —Ä–∞–∑–¥–µ–ª–æ–≤
            if label and not label.startswith("  ‚Ä¢") and value == "":
                ws_stats.cell(row=row_num, column=1).font = Font(bold=True, size=11)
        
        # –®–∏—Ä–∏–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫
        ws_stats.column_dimensions['A'].width = 40
        ws_stats.column_dimensions['B'].width = 20
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
    wb.save(output_path)
    print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_path}")
    print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
    
    return True


def export_by_filename(db: Database, output_path: Path, filename_filter: str):
    """–≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    cursor = db.conn.cursor()
    cursor.execute("""
        SELECT 
            question, answer, direction, question_type, keywords, quality_score,
            call_direction, operator_phone, client_phone, call_date, call_time
        FROM qa_pairs
        WHERE filename LIKE ?
        ORDER BY id
    """, (f"%{filename_filter}%",))
    
    rows = cursor.fetchall()
    
    if not rows:
        print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–∞–π–ª–∞, —Å–æ–¥–µ—Ä–∂–∞—â–µ–≥–æ: {filename_filter}")
        return False
    
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "QA –ü–∞—Ä—ã"
    
    headers = ["–í–æ–ø—Ä–æ—Å", "–û—Ç–≤–µ—Ç", "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ Q&A", "–¢–∏–ø", "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", "–û—Ü–µ–Ω–∫–∞",
               "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–∞", "–¢–µ–ª–µ—Ñ–æ–Ω –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞", "–¢–µ–ª–µ—Ñ–æ–Ω –∫–ª–∏–µ–Ω—Ç–∞", "–î–∞—Ç–∞ –∑–≤–æ–Ω–∫–∞", "–í—Ä–µ–º—è –∑–≤–æ–Ω–∫–∞"]
    header_fill, header_font, thin_border = setup_worksheet_styles(ws)
    
    for col_num, header in enumerate(headers, 1):
        cell = ws.cell(row=1, column=col_num)
        cell.value = header
        cell.fill = header_fill
        cell.font = header_font
        cell.alignment = Alignment(horizontal='center', vertical='center')
        cell.border = thin_border
    
    for row_num, row_data in enumerate(rows, 2):
        try:
            keywords = json.loads(row_data[4]) if row_data[4] else []
            keywords_str = ", ".join(keywords)
        except:
            keywords_str = row_data[4] or ""
        
        values = [
            row_data[0],  # Question
            row_data[1],  # Answer
            row_data[2],  # Direction Q&A
            row_data[3] or "",  # Type
            keywords_str,  # Keywords
            row_data[5] or "",  # Score
            row_data[6] or "",  # Call direction
            row_data[7] or "",  # Operator phone
            row_data[8] or "",  # Client phone
            row_data[9] or "",  # Call date
            row_data[10] or ""  # Call time
        ]
        
        for col_num, value in enumerate(values, 1):
            cell = ws.cell(row=row_num, column=col_num)
            cell.value = value
            cell.border = thin_border
            cell.alignment = Alignment(vertical='top', wrap_text=True)
    
    ws.column_dimensions['A'].width = 60
    ws.column_dimensions['B'].width = 80
    ws.column_dimensions['C'].width = 20
    ws.column_dimensions['D'].width = 25
    ws.column_dimensions['E'].width = 30
    ws.column_dimensions['F'].width = 12
    ws.column_dimensions['G'].width = 15
    ws.column_dimensions['H'].width = 15
    ws.column_dimensions['I'].width = 15
    ws.column_dimensions['J'].width = 12
    ws.column_dimensions['K'].width = 10
    
    wb.save(output_path)
    print(f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω: {output_path}")
    print(f"üìä –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(rows)}")
    
    return True


def main():
    parser = argparse.ArgumentParser(
        description="–≠–∫—Å–ø–æ—Ä—Ç –ø–∞—Ä Q&A –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ Excel"
    )
    parser.add_argument(
        '--output', '-o',
        type=str,
        default=f"qa_export_{datetime.now().strftime('%Y%m%d_%H%M%S')}.xlsx",
        help="–ò–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: qa_export_YYYYMMDD_HHMMSS.xlsx)"
    )
    parser.add_argument(
        '--no-stats',
        action='store_true',
        help="–ù–µ –≤–∫–ª—é—á–∞—Ç—å –ª–∏—Å—Ç —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π"
    )
    parser.add_argument(
        '--filename',
        type=str,
        help="–§–∏–ª—å—Ç—Ä –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (—ç–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞)"
    )
    parser.add_argument(
        '--db',
        type=str,
        default=str(config.DB_PATH),
        help=f"–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.DB_PATH})"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ë–î
    db_path = Path(args.db)
    if not db_path.exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ main.py –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–∞–ª–æ–≥–æ–≤")
        return 1
    
    output_path = Path(args.output)
    
    try:
        with Database(db_path) as db:
            if args.filename:
                success = export_by_filename(db, output_path, args.filename)
            else:
                success = export_qa_pairs(db, output_path, not args.no_stats)
            
            return 0 if success else 1
            
    except Exception as e:
        import traceback
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        traceback.print_exc()
        return 1


if __name__ == "__main__":
    sys.exit(main())