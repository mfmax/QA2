#!/usr/bin/env python3
"""
–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –ø–∞—Ä Q&A –∏–∑ SQLite –≤ Qdrant —á–µ—Ä–µ–∑ LangChain
"""
import sys
import json
import logging
from pathlib import Path
from typing import List, Dict
import sqlite3

from langchain_community.embeddings import HuggingFaceEmbeddings
from langchain_community.vectorstores import Qdrant
from langchain.docstore.document import Document
from qdrant_client import QdrantClient
from qdrant_client.models import Distance, VectorParams
from tqdm import tqdm

import rag_config

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class QAIndexer:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–µ—Ä–∞"""
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è QA Indexer...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è embeddings –º–æ–¥–µ–ª–∏
        logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {rag_config.EMBEDDING_MODEL}")
        self.embeddings = HuggingFaceEmbeddings(
            model_name=rag_config.EMBEDDING_MODEL,
            model_kwargs={'device': rag_config.EMBEDDING_DEVICE},
            encode_kwargs={'batch_size': rag_config.EMBEDDING_BATCH_SIZE}
        )
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è Qdrant –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        rag_config.QDRANT_PATH.mkdir(parents=True, exist_ok=True)
        
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    
    def load_qa_pairs_from_db(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–∞—Ä Q&A –∏–∑ SQLite"""
        logger.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        conn = sqlite3.connect(rag_config.DB_PATH)
        conn.row_factory = sqlite3.Row
        cursor = conn.cursor()
        
        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ —Å —É—á—ë—Ç–æ–º –Ω–∞—Å—Ç—Ä–æ–µ–∫
        query = """
            SELECT 
                id, question, answer, direction, question_type, 
                keywords, filename, dialog_id,
                call_direction, operator_phone, client_phone, 
                call_date, call_time
            FROM qa_pairs
            WHERE 1=1
        """
        
        if rag_config.EXCLUDE_IRRELEVANT:
            query += " AND (is_irrelevant = 0 OR is_irrelevant IS NULL)"
        
        if not rag_config.INDEX_ALL_PAIRS:
            query += " AND is_audited = 1"
        
        cursor.execute(query)
        rows = cursor.fetchall()
        conn.close()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π
        qa_pairs = []
        for row in rows:
            try:
                keywords = json.loads(row['keywords']) if row['keywords'] else []
            except:
                keywords = []
            
            qa_pairs.append({
                'id': row['id'],
                'question': row['question'],
                'answer': row['answer'],
                'direction': row['direction'],
                'question_type': row['question_type'] or '',
                'keywords': keywords,
                'filename': row['filename'],
                'dialog_id': row['dialog_id'],
                'call_direction': row['call_direction'] or '',
                'operator_phone': row['operator_phone'] or '',
                'client_phone': row['client_phone'] or '',
                'call_date': row['call_date'] or '',
                'call_time': row['call_time'] or ''
            })
        
        logger.info(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(qa_pairs)} –ø–∞—Ä Q&A")
        return qa_pairs
    
    def prepare_documents(self, qa_pairs: List[Dict]) -> List[Document]:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
        logger.info("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏...")
        
        documents = []
        for pair in qa_pairs:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ (–≤–æ–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç)
            # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è multilingual-e5 –º–æ–¥–µ–ª–µ–π —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ
            page_content = f"query: {pair['question']}\n\npassage: {pair['answer']}"
            
            # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            metadata = {
                'id': pair['id'],
                'question': pair['question'],
                'answer': pair['answer'],
                'direction': pair['direction'],
                'question_type': pair['question_type'],
                'keywords': ', '.join(pair['keywords']),
                'filename': pair['filename'],
                'dialog_id': pair['dialog_id'],
                'call_direction': pair['call_direction'],
                'operator_phone': pair['operator_phone'],
                'client_phone': pair['client_phone'],
                'call_date': pair['call_date'],
                'call_time': pair['call_time']
            }
            
            doc = Document(page_content=page_content, metadata=metadata)
            documents.append(doc)
        
        logger.info(f"‚úÖ –ü–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–æ {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        return documents
    
    def index_documents(self, documents: List[Document]):
        """–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Qdrant —á–µ—Ä–µ–∑ LangChain"""
        logger.info("–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Qdrant...")
        
        total_docs = len(documents)
        batch_size = 100  # –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        with tqdm(total=total_docs, desc="–ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", unit="docs") as pbar:
            # –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            def progress_callback(batch_num, total_batches):
                pbar.update(batch_size)
            
            # –°–æ–∑–¥–∞–Ω–∏–µ vectorstore —á–µ—Ä–µ–∑ LangChain
            vectorstore = Qdrant.from_documents(
                documents=documents,
                embedding=self.embeddings,
                path=str(rag_config.QDRANT_PATH),
                collection_name=rag_config.QDRANT_COLLECTION_NAME,
                force_recreate=True,
                batch_size=batch_size
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ –∫–æ–Ω—Ü–∞ –µ—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å
            pbar.update(total_docs - pbar.n)
        
        logger.info("‚úÖ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return vectorstore
    
    def run(self):
        """–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"""
        try:
            logger.info("="*60)
            logger.info("–ó–ê–ü–£–°–ö –ò–ù–î–ï–ö–°–ê–¶–ò–ò Q&A –í QDRANT")
            logger.info("="*60)
            
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            qa_pairs = self.load_qa_pairs_from_db()
            
            if not qa_pairs:
                logger.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
                return False
            
            # 2. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
            documents = self.prepare_documents(qa_pairs)
            
            # 3. –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è (–º–µ—Ç–æ–¥ —Å–∞–º –ø–µ—Ä–µ—Å–æ–∑–¥–∞—Å—Ç –∫–æ–ª–ª–µ–∫—Ü–∏—é)
            logger.info("–ù–∞—á–∏–Ω–∞–µ—Ç—Å—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)...")
            vectorstore = self.index_documents(documents)
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ (—Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–ª–∏–µ–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
            check_client = QdrantClient(path=str(rag_config.QDRANT_PATH))
            collection_info = check_client.get_collection(
                collection_name=rag_config.QDRANT_COLLECTION_NAME
            )
            
            logger.info("="*60)
            logger.info("‚úÖ –ò–ù–î–ï–ö–°–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê –£–°–ü–ï–®–ù–û")
            logger.info("="*60)
            logger.info(f"üìä –ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {collection_info.points_count}")
            logger.info(f"üìÅ –ü—É—Ç—å –∫ —Ö—Ä–∞–Ω–∏–ª–∏—â—É: {rag_config.QDRANT_PATH}")
            logger.info(f"üì¶ –ö–æ–ª–ª–µ–∫—Ü–∏—è: {rag_config.QDRANT_COLLECTION_NAME}")
            logger.info("="*60)
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}", exc_info=True)
            return False


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    if not rag_config.DB_PATH.exists():
        logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {rag_config.DB_PATH}")
        logger.error("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ main.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return 1
    
    indexer = QAIndexer()
    success = indexer.run()
    
    return 0 if success else 1


if __name__ == "__main__":
    sys.exit(main())