#!/usr/bin/env python3
"""
Real-time –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –≥—Ä—É–ø–ø—ã —á–µ—Ä–µ–∑ Bot API
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ daemon - –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–ª—É—à–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
"""
import sys
import re
import sqlite3
import hashlib
from pathlib import Path
from datetime import datetime
import logging

from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, filters, ContextTypes

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ config
sys.path.append(str(Path(__file__).parent.parent))
import config

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('tg_bot_monitor.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


class TelegramBotMonitor:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è bot –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ config
        self.bot_token = config.TELEGRAM_BOT_TOKEN
        self.lawyer_username = 'lawyer_fcb'  # Username —é—Ä–∏—Å—Ç–∞ (–±–µ–∑ @)
        
        # –ë–î
        self.db_path = config.DB_PATH
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'total_messages': 0,
            'lawyer_replies': 0,
            'pairs_saved': 0,
            'duplicates_skipped': 0,
            'errors': 0,
            'started_at': datetime.now()
        }
    
    def clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not text:
            return ""
        
        # –£–¥–∞–ª–µ–Ω–∏–µ markdown —Ä–∞–∑–º–µ—Ç–∫–∏
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)
        text = re.sub(r'\*(.*?)\*', r'\1', text)
        text = re.sub(r'__(.*?)__', r'\1', text)
        text = re.sub(r'`(.*?)`', r'\1', text)
        text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        return text
    
    def generate_dialog_id(self, question: str, answer: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–∞—Ä—ã"""
        data = f"tgbot:{question[:100]}:{answer[:100]}"
        return hashlib.md5(data.encode()).hexdigest()
    
    def is_pair_exists(self, dialog_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ä—ã –≤ –ë–î"""
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            cursor.execute(
                "SELECT id FROM qa_pairs WHERE dialog_id = ?",
                (dialog_id,)
            )
            exists = cursor.fetchone() is not None
            conn.close()
            return exists
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥—É–±–ª–∏–∫–∞—Ç–∞: {e}")
            return False
    
    def save_pair(self, question: str, answer: str, question_date: datetime) -> bool:
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—ã –≤ –ë–î"""
        dialog_id = self.generate_dialog_id(question, answer)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if self.is_pair_exists(dialog_id):
            logger.info(f"‚è≠Ô∏è  –ü–∞—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (dialog_id: {dialog_id[:16]}...)")
            self.stats['duplicates_skipped'] += 1
            return False
        
        try:
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É
            cursor.execute("""
                INSERT INTO qa_pairs 
                (dialog_id, filename, question, answer, direction, 
                 question_type, keywords, quality_score, source,
                 call_direction, operator_phone, client_phone, call_date, call_time)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                dialog_id,
                f"tgbot_lawyers_{question_date.strftime('%Y%m%d')}",
                question,
                answer,
                'TG –ß–∞—Ç —é—Ä–∏—Å—Ç—ã',
                None,
                '[]',
                None,
                'tglawyers',
                None, None, None, None, None
            ))
            
            conn.commit()
            conn.close()
            
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–æ–≤–∞—è –ø–∞—Ä–∞ Q&A")
            logger.info(f"   Q: {question[:80]}...")
            logger.info(f"   A: {answer[:80]}...")
            
            self.stats['pairs_saved'] += 1
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã: {e}")
            self.stats['errors'] += 1
            return False
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            message = update.message
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
            if not message or not message.text:
                return
            
            self.stats['total_messages'] += 1
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é—Ä–∏—Å—Ç–∞
            if not message.from_user or message.from_user.username != self.lawyer_username:
                return
            
            self.stats['lawyer_replies'] += 1
            logger.info(f"üîç –û–±–Ω–∞—Ä—É–∂–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç @{self.lawyer_username}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ reply –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if not message.reply_to_message:
                logger.warning("‚ö†Ô∏è  –°–æ–æ–±—â–µ–Ω–∏–µ —é—Ä–∏—Å—Ç–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º (–Ω–µ—Ç reply)")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å)
            question_msg = message.reply_to_message
            
            if not question_msg.text:
                logger.warning("‚ö†Ô∏è  –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç–∞")
                return
            
            # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç—ã
            question = self.clean_text(question_msg.text)
            answer = self.clean_text(message.text)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
            if len(question) < 10:
                logger.debug(f"‚è≠Ô∏è  –í–æ–ø—Ä–æ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(question)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            if len(answer) < 15:
                logger.debug(f"‚è≠Ô∏è  –û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π ({len(answer)} —Å–∏–º–≤–æ–ª–æ–≤)")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É
            self.save_pair(question, answer, question_msg.date)
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}", exc_info=True)
            self.stats['errors'] += 1
    
    def print_stats(self):
        """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        uptime = datetime.now() - self.stats['started_at']
        hours, remainder = divmod(int(uptime.total_seconds()), 3600)
        minutes, seconds = divmod(remainder, 60)
        
        logger.info("\n" + "="*60)
        logger.info("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        logger.info("="*60)
        logger.info(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º {seconds}—Å")
        logger.info(f"üì® –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {self.stats['total_messages']}")
        logger.info(f"üí¨ –û—Ç–≤–µ—Ç–æ–≤ —é—Ä–∏—Å—Ç–∞: {self.stats['lawyer_replies']}")
        logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –ø–∞—Ä: {self.stats['pairs_saved']}")
        logger.info(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {self.stats['duplicates_skipped']}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {self.stats['errors']}")
        logger.info("="*60 + "\n")
    
    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("\n" + "="*60)
        logger.info("ü§ñ TELEGRAM BOT MONITOR - –ó–ê–ü–£–°–ö")
        logger.info("="*60)
        logger.info(f"üë§ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã: @{self.lawyer_username}")
        logger.info(f"üíæ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {self.db_path}")
        logger.info("\nüöÄ REAL-TIME –ú–û–ù–ò–¢–û–†–ò–ù–ì –ó–ê–ü–£–©–ï–ù")
        logger.info("‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π...")
        logger.info("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n")
        
        # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–æ—Ç–∞
        application = ApplicationBuilder().token(self.bot_token).build()
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–π –≤—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        from telegram.ext import JobQueue
        
        def stats_job(context):
            self.print_stats()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        application.job_queue.run_repeating(stats_job, interval=300, first=300)
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
            await application.run_polling()
        except KeyboardInterrupt:
            logger.info("\n‚ö†Ô∏è  –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            self.print_stats()
            logger.info("üëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n")
    
    def run(self):
        """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
        import asyncio
        asyncio.run(self.start_monitoring())


def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ë–î
    if not config.DB_PATH.exists():
        logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config.DB_PATH}")
        logger.error("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ main.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
    if not hasattr(config, 'TELEGRAM_BOT_TOKEN') or not config.TELEGRAM_BOT_TOKEN:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!")
        logger.error("–î–æ–±–∞–≤—å—Ç–µ –≤ .env:")
        logger.error("  TELEGRAM_BOT_TOKEN=1234567890:ABCdefGHI...")
        logger.error("")
        logger.error("–ü–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω: https://t.me/botfather")
        return 1
    
    try:
        monitor = TelegramBotMonitor()
        monitor.run()
        return 0
    except KeyboardInterrupt:
        logger.info("\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    sys.exit(main())