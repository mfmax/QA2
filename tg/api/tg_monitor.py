#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –≥—Ä—É–ø–ø—ã –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä Q&A –æ—Ç —é—Ä–∏—Å—Ç–∞
–û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏ /tg + —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏
"""
import sys
import re
import sqlite3
import asyncio
import hashlib
from pathlib import Path
from datetime import datetime
from telethon import TelegramClient
from telethon.tl.types import MessageService
import logging

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ config
sys.path.append(str(Path(__file__).parent.parent))
import config

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class TelegramMonitor:
    def __init__(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        # –ü–æ–ª—É—á–∞–µ–º credentials –∏–∑ config –∏–ª–∏ .env
        self.api_id = config.TELEGRAM_API_ID
        self.api_hash = config.TELEGRAM_API_HASH
        self.phone = config.TELEGRAM_PHONE
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä—É–ø–ø—ã
        self.chat_username = config.TELEGRAM_CHAT  # –ù–∞–ø—Ä–∏–º–µ—Ä: 'fcb_lawyers' –∏–ª–∏ ID
        self.lawyer_username = 'lawyer_fcb'
        
        # –ë–î
        self.db_path = config.DB_PATH
        
        # –ö–ª–∏–µ–Ω—Ç Telegram —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º —Å–µ—Å—Å–∏–∏
        self.client = TelegramClient('qa_monitor_session', self.api_id, self.api_hash)
    
    def clean_text(self, text: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not text:
            return ""
        
        # –£–¥–∞–ª–µ–Ω–∏–µ markdown —Ä–∞–∑–º–µ—Ç–∫–∏
        text = re.sub(r'\*\*(.*?)\*\*', r'\1', text)  # **bold**
        text = re.sub(r'\*(.*?)\*', r'\1', text)      # *italic*
        text = re.sub(r'__(.*?)__', r'\1', text)      # __underline__
        text = re.sub(r'`(.*?)`', r'\1', text)        # `code`
        text = re.sub(r'```.*?```', '', text, flags=re.DOTALL)  # ```code blocks```
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
        text = re.sub(r'\s+', ' ', text)
        text = text.strip()
        
        return text
    
    def generate_dialog_id(self, question: str, answer: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –ø–∞—Ä—ã"""
        data = f"tg:{question[:100]}:{answer[:100]}"
        return hashlib.md5(data.encode()).hexdigest()
    
    def is_pair_exists(self, dialog_id: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞—Ä—ã –≤ –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute(
            "SELECT id FROM qa_pairs WHERE dialog_id = ?",
            (dialog_id,)
        )
        exists = cursor.fetchone() is not None
        conn.close()
        return exists
    
    def save_pair(self, question: str, answer: str, question_date: datetime):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä—ã –≤ –ë–î"""
        dialog_id = self.generate_dialog_id(question, answer)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç—ã
        if self.is_pair_exists(dialog_id):
            logger.info(f"–ü–∞—Ä–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (dialog_id: {dialog_id})")
            return False
        
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É
            cursor.execute("""
                INSERT INTO qa_pairs 
                (dialog_id, filename, question, answer, direction, 
                 question_type, keywords, quality_score, source,
                 call_direction, operator_phone, client_phone, call_date, call_time)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            """, (
                dialog_id,
                f"tg_lawyers_{question_date.strftime('%Y%m%d')}",  # filename
                question,
                answer,
                'TG –ß–∞—Ç —é—Ä–∏—Å—Ç—ã',  # direction
                None,  # question_type
                '[]',  # keywords (–ø—É—Å—Ç–æ–π JSON –º–∞—Å—Å–∏–≤)
                None,  # quality_score
                'tglawyers',  # source
                None,  # call_direction
                None,  # operator_phone
                None,  # client_phone
                None,  # call_date
                None   # call_time
            ))
            
            conn.commit()
            logger.info(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –ø–∞—Ä–∞ Q&A (dialog_id: {dialog_id})")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä—ã: {e}")
            conn.rollback()
            return False
        finally:
            conn.close()
    
    async def fetch_qa_pairs(self, limit: int = 1000):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä Q&A –∏–∑ –≥—Ä—É–ø–ø—ã"""
        await self.client.start(phone=self.phone)
        logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–Ω–æ—Å—Ç—å —á–∞—Ç–∞
            chat = await self.client.get_entity(self.chat_username)
            logger.info(f"üì± –ß–∞—Ç –Ω–∞–π–¥–µ–Ω: {chat.title}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
            messages = await self.client.get_messages(chat, limit=limit)
            logger.info(f"üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            # –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
            messages_dict = {msg.id: msg for msg in messages}
            
            pairs_found = 0
            pairs_saved = 0
            
            # –ò—â–µ–º –æ—Ç–≤–µ—Ç—ã –æ—Ç —é—Ä–∏—Å—Ç–∞
            for msg in messages:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                if isinstance(msg, MessageService):
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞
                if not msg.text:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —é—Ä–∏—Å—Ç–∞
                sender = await msg.get_sender()
                if not sender or sender.username != self.lawyer_username:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —á—å—ë-—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if not msg.reply_to or not msg.reply_to.reply_to_msg_id:
                    continue
                
                # –ù–∞—Ö–æ–¥–∏–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å)
                question_msg_id = msg.reply_to.reply_to_msg_id
                question_msg = messages_dict.get(question_msg_id)
                
                if not question_msg or not question_msg.text:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≤–æ–ø—Ä–æ—Å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ (msg_id: {msg.id})")
                    continue
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç—ã
                question = self.clean_text(question_msg.text)
                answer = self.clean_text(msg.text)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
                if len(question) < 10 or len(answer) < 15:
                    logger.debug(f"–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ø–∞—Ä–∞: —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è")
                    continue
                
                pairs_found += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É
                if self.save_pair(question, answer, question_msg.date):
                    pairs_saved += 1
                
                logger.info(f"–ü–∞—Ä–∞ #{pairs_found}:")
                logger.info(f"  Q: {question[:100]}...")
                logger.info(f"  A: {answer[:100]}...")
                logger.info(f"  –î–∞—Ç–∞: {question_msg.date}")
                logger.info("")
            
            logger.info("="*60)
            logger.info(f"‚úÖ –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞—Ä: {pairs_found}")
            logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –Ω–æ–≤—ã—Ö: {pairs_saved}")
            logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ (–¥—É–±–ª–∏–∫–∞—Ç—ã): {pairs_found - pairs_saved}")
            logger.info("="*60)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {e}", exc_info=True)
        finally:
            await self.client.disconnect()
    
    def run(self, limit: int = 1000):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        logger.info("="*60)
        logger.info("TELEGRAM MONITOR - –ó–ê–ü–£–°–ö")
        logger.info("="*60)
        
        asyncio.run(self.fetch_qa_pairs(limit))


def main():
    import argparse
    
    parser = argparse.ArgumentParser(
        description="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –≥—Ä—É–ø–ø—ã —é—Ä–∏—Å—Ç–æ–≤ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä Q&A"
    )
    parser.add_argument(
        '--limit',
        type=int,
        default=1000,
        help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 1000)"
    )
    
    args = parser.parse_args()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ë–î
    if not config.DB_PATH.exists():
        logger.error(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {config.DB_PATH}")
        logger.error("–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ main.py –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        return 1
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ Telegram
    if not hasattr(config, 'TELEGRAM_API_ID') or not config.TELEGRAM_API_ID:
        logger.error("‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã credentials –¥–ª—è Telegram API")
        logger.error("–î–æ–±–∞–≤—å—Ç–µ –≤ config.py –∏–ª–∏ .env:")
        logger.error("  TELEGRAM_API_ID=your_api_id")
        logger.error("  TELEGRAM_API_HASH=your_api_hash")
        logger.error("  TELEGRAM_PHONE=+your_phone")
        logger.error("  TELEGRAM_CHAT=chat_username_or_id")
        logger.error("")
        logger.error("–ü–æ–ª—É—á–∏—Ç—å API credentials: https://my.telegram.org/apps")
        return 1
    
    try:
        monitor = TelegramMonitor()
        monitor.run(limit=args.limit)
        return 0
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    sys.exit(main())