#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram
–û–ë–ù–û–í–õ–ï–ù–û: –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Ä–∞–±–æ—Ç—ã –∏–∑ –ø–æ–¥–ø–∞–ø–∫–∏ /tg + —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏
"""
import sys
import asyncio
from pathlib import Path
from telethon import TelegramClient

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ config
sys.path.append(str(Path(__file__).parent.parent))
import config

async def test_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram"""
    print("\n" + "="*60)
    print("üîç –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –ö TELEGRAM")
    print("="*60 + "\n")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials
    print("1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ credentials...")
    
    if not hasattr(config, 'TELEGRAM_API_ID') or not config.TELEGRAM_API_ID:
        print("‚ùå TELEGRAM_API_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    print(f"‚úÖ TELEGRAM_API_ID: {config.TELEGRAM_API_ID}")
    
    if not hasattr(config, 'TELEGRAM_API_HASH') or not config.TELEGRAM_API_HASH:
        print("‚ùå TELEGRAM_API_HASH –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    print(f"‚úÖ TELEGRAM_API_HASH: {config.TELEGRAM_API_HASH[:10]}...")
    
    if not hasattr(config, 'TELEGRAM_PHONE') or not config.TELEGRAM_PHONE:
        print("‚ùå TELEGRAM_PHONE –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    print(f"‚úÖ TELEGRAM_PHONE: {config.TELEGRAM_PHONE}")
    
    if not hasattr(config, 'TELEGRAM_CHAT') or not config.TELEGRAM_CHAT:
        print("‚ùå TELEGRAM_CHAT –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        return False
    print(f"‚úÖ TELEGRAM_CHAT: {config.TELEGRAM_CHAT}")
    
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram
    print("\n2Ô∏è‚É£ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...")
    
    try:
        client = TelegramClient('qa_monitor_test_session', config.TELEGRAM_API_ID, config.TELEGRAM_API_HASH)
        await client.start(phone=config.TELEGRAM_PHONE)
        print("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ Telegram")
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        print("\n3Ô∏è‚É£ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ...")
        me = await client.get_me()
        print(f"‚úÖ –ò–º—è: {me.first_name} {me.last_name or ''}")
        print(f"‚úÖ Username: @{me.username}")
        print(f"‚úÖ ID: {me.id}")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É
        print("\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É...")
        try:
            chat = await client.get_entity(config.TELEGRAM_CHAT)
            print(f"‚úÖ –ß–∞—Ç –Ω–∞–π–¥–µ–Ω: {chat.title}")
            print(f"‚úÖ ID —á–∞—Ç–∞: {chat.id}")
            print(f"‚úÖ –¢–∏–ø: {type(chat).__name__}")
            
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            print("\n5Ô∏è‚É£ –¢–µ—Å—Ç —á—Ç–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π...")
            messages = await client.get_messages(chat, limit=10)
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(messages)} –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            
            if messages:
                print("\nüìù –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:")
                last_msg = messages[0]
                sender = await last_msg.get_sender()
                print(f"   –û—Ç: {sender.first_name if sender else 'Unknown'}")
                print(f"   –î–∞—Ç–∞: {last_msg.date}")
                print(f"   –¢–µ–∫—Å—Ç: {last_msg.text[:100] if last_msg.text else '<–±–µ–∑ —Ç–µ–∫—Å—Ç–∞>'}...")
            
            # –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é—Ä–∏—Å—Ç–∞
            print("\n6Ô∏è‚É£ –ü–æ–∏—Å–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç @lawyer_fcb...")
            lawyer_count = 0
            for msg in messages:
                sender = await msg.get_sender()
                if sender and sender.username == 'lawyer_fcb':
                    lawyer_count += 1
            
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {lawyer_count} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç —é—Ä–∏—Å—Ç–∞ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —á–∞—Ç—É: {e}")
            print("\nüí° –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:")
            print("   - –ù–µ–≤–µ—Ä–Ω—ã–π username –∏–ª–∏ ID —á–∞—Ç–∞")
            print("   - –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–≥–æ —á–∞—Ç–∞")
            print("   - –ß–∞—Ç –±—ã–ª —É–¥–∞–ª—ë–Ω –∏–ª–∏ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω")
            return False
        
        await client.disconnect()
        
        print("\n" + "="*60)
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´ –£–°–ü–ï–®–ù–û!")
        print("="*60)
        print("\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å: python tg_monitor.py\n")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        print("\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        print("   1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API credentials")
        print("   2. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∫–∞–∑–∞–Ω –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
        print("   3. –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–∑ Telegram")
        return False


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞"""
    asyncio.run(test_connection())


if __name__ == "__main__":
    main()