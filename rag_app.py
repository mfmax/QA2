#!/usr/bin/env python3
"""
Flask –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RAG —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤
"""
from flask import Flask, render_template, request, jsonify, Response, stream_with_context
import logging
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.append(str(Path(__file__).parent.parent))

import rag_config
from rag_retriever import RAGRetriever

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

app = Flask(__name__)
app.config['JSON_AS_ASCII'] = False

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä retriever (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ)
retriever = None


def init_retriever():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG retriever"""
    global retriever
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã...")
        retriever = RAGRetriever()
        logger.info("‚úÖ RAG —Å–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ")
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ RAG —Å–∏—Å—Ç–µ–º—ã: {e}", exc_info=True)
        return False


@app.route('/')
def index():
    """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
    return render_template('rag_index.html', 
                         show_sources=rag_config.SHOW_SOURCE_PAIRS,
                         streaming=rag_config.ENABLE_STREAMING)


@app.route('/api/ask', methods=['POST'])
def ask_question():
    """
    API endpoint –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç JSON —Å –æ—Ç–≤–µ—Ç–æ–º (–±–µ–∑ streaming)
    """
    if not retriever:
        return jsonify({
            'success': False,
            'error': 'RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
        }), 500
    
    try:
        data = request.get_json()
        query = data.get('question', '').strip()
        
        if not query:
            return jsonify({
                'success': False,
                'error': '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å: {query}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –±–µ–∑ streaming
        result = retriever.answer_question(query, use_streaming=False)
        
        return jsonify(result)
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}", exc_info=True)
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/api/ask_stream', methods=['POST'])
def ask_question_stream():
    """
    API endpoint –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ streaming
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç Server-Sent Events (SSE)
    """
    if not retriever:
        return jsonify({
            'success': False,
            'error': 'RAG —Å–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞'
        }), 500
    
    try:
        data = request.get_json()
        query = data.get('question', '').strip()
        
        if not query:
            return jsonify({
                'success': False,
                'error': '–í–æ–ø—Ä–æ—Å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º'
            }), 400
        
        logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å (streaming): {query}")
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç —Å–æ streaming
        result = retriever.answer_question(query, use_streaming=True)
        
        def generate():
            """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è SSE"""
            import json
            
            # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º source_pairs –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if result.get('source_pairs'):
                yield f"data: {json.dumps({'type': 'sources', 'data': result['source_pairs']}, ensure_ascii=False)}\n\n"
            
            # –ó–∞—Ç–µ–º —Å—Ç—Ä–∏–º–∏–º –æ—Ç–≤–µ—Ç
            if result['success']:
                yield f"data: {json.dumps({'type': 'answer_start'}, ensure_ascii=False)}\n\n"
                
                for chunk in result['answer_stream']:
                    yield f"data: {json.dumps({'type': 'answer_chunk', 'data': chunk}, ensure_ascii=False)}\n\n"
                
                yield f"data: {json.dumps({'type': 'answer_end'}, ensure_ascii=False)}\n\n"
            else:
                yield f"data: {json.dumps({'type': 'error', 'data': result.get('answer', '–û—à–∏–±–∫–∞')}, ensure_ascii=False)}\n\n"
            
            yield "data: [DONE]\n\n"
        
        return Response(
            stream_with_context(generate()),
            mimetype='text/event-stream',
            headers={
                'Cache-Control': 'no-cache',
                'X-Accel-Buffering': 'no'
            }
        )
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞ (streaming): {e}", exc_info=True)
        return jsonify({
            'success': False,
            'error': str(e)
        }), 500


@app.route('/api/health')
def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã"""
    return jsonify({
        'status': 'ok' if retriever else 'not_initialized',
        'config': {
            'embedding_model': rag_config.EMBEDDING_MODEL,
            'top_k': rag_config.TOP_K_RESULTS,
            'similarity_threshold': rag_config.SIMILARITY_THRESHOLD,
            'streaming_enabled': rag_config.ENABLE_STREAMING,
            'show_sources': rag_config.SHOW_SOURCE_PAIRS
        }
    })


if __name__ == '__main__':
    print("\n" + "="*60)
    print("üöÄ –ó–ê–ü–£–°–ö RAG –í–ï–ë-–ò–ù–¢–ï–†–§–ï–ô–°–ê")
    print("="*60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã
    if not init_retriever():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å RAG —Å–∏—Å—Ç–µ–º—É")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ:")
        print("1. –ó–∞–ø—É—â–µ–Ω rag_indexer.py –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
        print("2. –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ rag_requirements.txt")
        print("3. –ù–∞—Å—Ç—Ä–æ–µ–Ω .env —Ñ–∞–π–ª —Å OPENAI_API_KEY")
        sys.exit(1)
    
    print(f"\nüìä –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print(f"  ‚Ä¢ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {rag_config.EMBEDDING_MODEL}")
    print(f"  ‚Ä¢ Top-K —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {rag_config.TOP_K_RESULTS}")
    print(f"  ‚Ä¢ –ü–æ—Ä–æ–≥ —Å—Ö–æ–∂–µ—Å—Ç–∏: {rag_config.SIMILARITY_THRESHOLD}")
    print(f"  ‚Ä¢ Streaming: {'‚úÖ' if rag_config.ENABLE_STREAMING else '‚ùå'}")
    print(f"  ‚Ä¢ –ü–æ–∫–∞–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {'‚úÖ' if rag_config.SHOW_SOURCE_PAIRS else '‚ùå'}")
    
    print(f"\nüåê –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –Ω–∞ http://0.0.0.0:5001")
    print("="*60 + "\n")
    
    # –ó–∞–ø—É—Å–∫ –±–µ–∑ debug mode —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥–≤–æ–π–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
    app.run(debug=False, host='0.0.0.0', port=5001)