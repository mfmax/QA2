#!/usr/bin/env python3
"""
QA Extractor - –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤
"""
import sys
import logging
from pathlib import Path
from typing import List
import argparse

from tqdm import tqdm

import config
from db import Database
from api_client import OpenAIClient
from processor import DialogProcessor


def setup_logging():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        level=getattr(logging, config.LOG_LEVEL),
        format=config.LOG_FORMAT,
        handlers=[
            logging.FileHandler(config.LOG_FILE, encoding='utf-8'),
            logging.StreamHandler(sys.stdout)
        ]
    )


def get_dialog_files(directory: Path) -> List[Path]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –¥–∏–∞–ª–æ–≥–æ–≤"""
    if not directory.exists():
        raise FileNotFoundError(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {directory}")
    
    files = list(directory.glob("*.txt"))
    return sorted(files)


def print_statistics(stats: dict):
    """–í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    print("\n" + "="*60)
    print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò")
    print("="*60)
    print(f"–í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {stats['total_files']}")
    print(f"–§–∞–π–ª–æ–≤ —Å –±–∏–∑–Ω–µ—Å-–ø–∞—Ä–∞–º–∏: {stats['files_with_pairs']}")
    print(f"–í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä: {stats['total_pairs']}")
    print(f"–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {stats['avg_quality_score']}/10")
    
    if stats['by_direction']:
        print("\nüìç –ü–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º:")
        for direction, count in stats['by_direction'].items():
            print(f"  ‚Ä¢ {direction}: {count}")
    
    if stats['by_type']:
        print("\nüìù –ü–æ —Ç–∏–ø–∞–º –≤–æ–ø—Ä–æ—Å–æ–≤:")
        for q_type, count in stats['by_type'].items():
            if q_type:
                print(f"  ‚Ä¢ {q_type}: {count}")
    
    print("="*60 + "\n")


def main():
    parser = argparse.ArgumentParser(
        description="–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä Q&A –∏–∑ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –ø–æ–º–æ—â—å—é OpenAI"
    )
    parser.add_argument(
        '--dir',
        type=str,
        default=str(config.DIALOGS_DIR),
        help=f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —Å –¥–∏–∞–ª–æ–≥–∞–º–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: {config.DIALOGS_DIR})"
    )
    parser.add_argument(
        '--reprocess',
        action='store_true',
        help="–ü–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"
    )
    parser.add_argument(
        '--stats-only',
        action='store_true',
        help="–¢–æ–ª—å–∫–æ –≤—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–µ–∑ –æ–±—Ä–∞–±–æ—Ç–∫–∏"
    )
    parser.add_argument(
        '--limit',
        type=int,
        default=None,
        help="–û–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    setup_logging()
    logger = logging.getLogger(__name__)
    
    logger.info("="*60)
    logger.info("QA EXTRACTOR - –ó–ê–ü–£–°–ö")
    logger.info("="*60)
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        db = Database(config.DB_PATH)
        
        # –ï—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        if args.stats_only:
            stats = db.get_statistics()
            print_statistics(stats)
            db.close()
            return 0
        
        openai_client = OpenAIClient()
        processor = DialogProcessor(openai_client)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
        dialogs_dir = Path(args.dir)
        all_files = get_dialog_files(dialogs_dir)
        
        if not all_files:
            logger.warning(f"–§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {dialogs_dir}")
            return 0
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(all_files)}")
        
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        if not args.reprocess:
            files_to_process = [
                f for f in all_files 
                if not db.is_file_processed(f.name)
            ]
            skipped_count = len(all_files) - len(files_to_process)
            if skipped_count > 0:
                logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω–æ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {skipped_count}")
        else:
            files_to_process = all_files
            logger.info("–†–µ–∂–∏–º –ø–µ—Ä–µ–æ–±—Ä–∞–±–æ—Ç–∫–∏: –≤—Å–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∑–∞–Ω–æ–≤–æ")
        
        # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ª–∏–º–∏—Ç–∞
        if args.limit:
            files_to_process = files_to_process[:args.limit]
            logger.info(f"–ü—Ä–∏–º–µ–Ω—ë–Ω –ª–∏–º–∏—Ç: {args.limit} —Ñ–∞–π–ª–æ–≤")
        
        if not files_to_process:
            logger.info("–ù–µ—Ç —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            stats = db.get_statistics()
            print_statistics(stats)
            db.close()
            return 0
        
        logger.info(f"–ö –æ–±—Ä–∞–±–æ—Ç–∫–µ: {len(files_to_process)} —Ñ–∞–π–ª–æ–≤")
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–æ–≤
        success_count = 0
        error_count = 0
        total_pairs = 0
        
        progress_bar = tqdm(
            files_to_process,
            desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–æ–≤",
            disable=not config.SHOW_PROGRESS_BAR
        )
        
        for filepath in progress_bar:
            progress_bar.set_postfix({
                '—Ñ–∞–π–ª': filepath.name[:30],
                '—É—Å–ø–µ—à–Ω–æ': success_count,
                '–æ—à–∏–±–æ–∫': error_count
            })
            
            try:
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∏–∞–ª–æ–≥–∞
                result = processor.process_dialog(filepath)
                
                # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                if result['success']:
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–∞—Ä –≤ –ë–î
                    if result['pairs']:
                        file_metadata = result.get('file_metadata')
                        logger.info(f"–ü–µ—Ä–µ–¥–∞—á–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –≤ save_qa_pairs: {file_metadata}")
                        
                        db.save_qa_pairs(
                            result['pairs'],
                            result['filename'],
                            result['dialog_id'],
                            file_metadata
                        )
                        total_pairs += len(result['pairs'])
                    
                    # –û—Ç–º–µ—Ç–∫–∞ —Ñ–∞–π–ª–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–≥–æ
                    db.mark_file_processed(
                        result['filename'],
                        len(result['pairs']),
                        result['has_business_pairs'],
                        result['error'],
                        file_metadata=result.get('file_metadata')
                    )
                    
                    success_count += 1
                else:
                    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—à–∏–±–∫–∏
                    db.mark_file_processed(
                        result['filename'],
                        0,
                        False,
                        result['error'],
                        file_metadata=result.get('file_metadata')
                    )
                    error_count += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ {filepath.name}: {result['error']}")
                
            except KeyboardInterrupt:
                logger.warning("\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {filepath.name}: {e}")
                error_count += 1
                continue
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        logger.info("="*60)
        logger.info("–û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê")
        logger.info("="*60)
        logger.info(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {success_count}")
        logger.info(f"‚ùå –û—à–∏–±–æ–∫: {error_count}")
        logger.info(f"üìù –í—Å–µ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–æ –ø–∞—Ä: {total_pairs}")
        
        # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ –ë–î
        stats = db.get_statistics()
        print_statistics(stats)
        
        db.close()
        return 0
        
    except KeyboardInterrupt:
        logger.warning("\n‚ö†Ô∏è  –ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 1
    except Exception as e:
        logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        return 1


if __name__ == "__main__":
    sys.exit(main())